/**
 * Sepolia -> BSC Testnet token transfer using Wormhole v3 high-level API *
 * - uses ethers v6
 * - uses @wormhole-foundation/sdk v3+
 */

import { ethers } from "ethers";
import dotenv from "dotenv";

// Wormhole SDK v3+:
import { wormhole, amount, TokenId, Wormhole, Signer, chain, ChainContext, ChainAddress } from "@wormhole-foundation/sdk";
import evm from "@wormhole-foundation/sdk/evm";

dotenv.config();

/* ---------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---------------------------------------------- */
const FROM_CHAIN_NAME = 'Sepolia';     // –∏–º—è —Ü–µ–ø–∏ –∫–∞–∫ –≤ Wormhole (—Å–º. docs)
const TO_CHAIN_NAME = 'Bsc';    // –∏–º—è —Ü–µ–ª–µ–≤–æ–π —Ü–µ–ø–∏
const AMOUNT_HUMAN = "0.005";          // —Å–∫–æ–ª—å–∫–æ ETH —Ö–æ—Ç–∏–º –ø–µ—Ä–µ–¥–∞—Ç—å (—Å—Ç—Ä–æ–∫–∞) */

/* ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏/env ---------- */
const PRIVATE_KEY = process.env.PRIVATE_KEY;
const SEPOLIA_RPC = process.env.INFURA_API_KEY;
const BSC_TESTNET_RPC = process.env.BSC_TESTNET_RPC;

if (!PRIVATE_KEY || !SEPOLIA_RPC || !BSC_TESTNET_RPC) {
  console.error("‚ùå –£–∫–∞–∂–∏—Ç–µ PRIVATE_KEY, SEPOLIA_RPC –∏ BSC_TESTNET_RPC –≤ .env");
  process.exit(1);
}

async function getSignerForChain(rpcUrl: string) {
  const provider = new ethers.JsonRpcProvider(rpcUrl);
  const wallet = new ethers.Wallet(PRIVATE_KEY!, provider);
  return { provider, wallet };
}

async function main() {
  console.log("üîÅ –ó–∞–ø—É—Å–∫–∞–µ–º Wormhole token transfer (Sepolia -> BSC Testnet)");

  // 1) Platform loaders: –ø–µ—Ä–µ–¥–∞—ë–º –∑–∞–≥—Ä—É–∑—á–∏–∫–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º (evm –¥–ª—è –Ω–∞—à–µ–≥–æ —Å–ª—É—á–∞—è)
  //    –í v3+ –º—ã –ø–µ—Ä–µ–¥–∞—ë–º –∏–º–µ–Ω–Ω–æ —Å–∞–º –∑–∞–≥—Ä—É–∑—á–∏–∫ (—Ñ—É–Ω–∫—Ü–∏—é), –∞ –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º –µ–≥–æ.
  const loaders = [evm]; // –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ evm ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤—Å–µ EVM-—á–µ–π–Ω—ã

  // 2) –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç Wormhole (Testnet)
  //    wormhole(...) –≤–µ—Ä–Ω—ë—Ç –æ–±—ä–µ–∫—Ç, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å wh.getChain(...)
  //    –ò—Å–ø–æ–ª—å–∑—É–µ–º any, —á—Ç–æ–±—ã TS –Ω–µ —Ä—É–≥–∞–ª—Å—è –Ω–∞ —Å–ª–æ–∂–Ω—ã–µ generic-—Ç–∏–ø–∏–∑–∞—Ü–∏–∏ SDK
  const wh: any = await wormhole("Testnet", [evm]);
  console.log("‚úÖ Wormhole context —Å–æ–∑–¥–∞–Ω");

  // 3) –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–ø–µ–π (ChainDefinition-like)
  //    wh.getChain(name) ‚Äî –±–µ—Ä—ë—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ø–∏ –ø–æ –∏–º–µ–Ω–∏
  const sendChain: any = wh.getChain(FROM_CHAIN_NAME);  
  const rcvChain: any = wh.getChain(TO_CHAIN_NAME);
  console.log(`–û—Ç–ø—Ä–∞–≤–ª—è—é—â–∞—è —Ü–µ–ø—å: ${sendChain.chain}, –ø—Ä–∏–Ω–∏–º–∞—é—â–∞—è: ${rcvChain.chain}`);

  // 4) –°–æ–∑–¥–∞—ë–º –ª–æ–∫–∞–ª—å–Ω—ã–µ signers –¥–ª—è –æ–±–µ–∏—Ö —Å–µ—Ç–µ–π (ethers)
  const { provider: fromProvider, wallet: fromWallet } = await getSignerForChain(SEPOLIA_RPC!);
  const { provider: toProvider, wallet: toWallet } = await getSignerForChain(BSC_TESTNET_RPC!);

  console.log("From wallet:", await fromWallet.getAddress());
  console.log("To wallet:", await toWallet.getAddress());
  
  //–ø–æ–ª—É—á–∞–µ–º –∏–∑ –Ω–∞—à–∏—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π signer
  const sendSigner : Signer = await (await evm()).getSigner(await sendChain.getRpc(), PRIVATE_KEY!);
  const rcvSigner : Signer = await (await evm()).getSigner(await rcvChain.getRpc(), PRIVATE_KEY!);  

  //—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç-–∏—Å—Ç–æ—á–Ω–∏–∫ –∏ –æ–±—ä–µ–∫—Ç-–ø–æ–ª—É—á–∞—Ç–µ–ª—å –∏–∑ signer
  const source = {chain: sendChain.chain, signer: sendSigner, 
      address: Wormhole.chainAddress(sendChain.chain, sendSigner.address())}; 
  const dest = {chain: rcvChain.chain, signer: rcvSigner, 
      address: Wormhole.chainAddress(rcvChain.chain, rcvSigner.address())};     

  // 5) –û–ø—Ä–µ–¥–µ–ª—è–µ–º token id ‚Äî shortcut –¥–ª—è –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞  
   const token = Wormhole.tokenId(sendChain.chain, 'native');
  
  // 6) –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É (–Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ –µ–¥–∏–Ω–∏—Ü—ã, —É—á–∏—Ç—ã–≤–∞—è decimals)
  //    –î–ª—è –Ω–∞—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –æ–±—ã—á–Ω–æ 18 –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö
  const decimals = 18;
  const amt = amount.units(amount.parse(AMOUNT_HUMAN, decimals));

  // 7) –°–æ–∑–¥–∞—ë–º high-level transfer (–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ ‚Äî wh.tokenTransfer(...))
  //    –ê—Ä–≥—É–º–µ–Ω—Ç—ã: token, amount, sourceAddress, destAddress, route (–Ω–∞–ø—Ä–∏–º–µ—Ä 'TokenBridge')
  //    –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Ä—à—Ä—É—Ç 'TokenBridge' (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π token bridge)
  //    –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç xfer (TokenTransfer) ‚Äî –¥–∞–ª–µ–µ —Ä–∞–±–æ—Ç–∞–µ–º —Å –Ω–∏–º     
  
  console.log(`–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞: ${AMOUNT_HUMAN} (${amt})`);   
  const xfer: any = await wh.tokenTransfer(
    token,
    amt,    
    source.address,
    dest.address,    
    'TokenBridge' // –º–∞—Ä—à—Ä—É—Ç (AutomaticTokenBridge –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª - –≤—ã–ª–µ—Ç–µ–ª–∞ –æ—à–∏–±–∫–∞, —á—Ç–æ –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Ç—è—Ö –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
  ); 
 
  console.log("‚úÖ TokenTransfer —Å–æ–∑–¥–∞–Ω");
 
  // 8) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–π —Ü–µ–ø–∏ (–∏–Ω–∏—Ü–∏–∞—Ü–∏—è)  
  console.log("üì§ –ò–Ω–∏—Ü–∏–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ (–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é —Å–µ—Ç—å)...");
  const srcTxids = await xfer.initiateTransfer(source.signer);
  console.log("Source txids:", srcTxids);

  // 9) –ñ–¥—ë–º VAA (attestation)
  // –í–∞–∂–Ω–æ: xfer.fetchAttestation() –∂–¥—ë—Ç –ø–æ–¥–ø–∏—Å–∏ –æ—Ç –≤—Å–µ—Ö guardian'–æ–≤
  // –Ω–∞ VAA. –≠—Ç–æ—Ç —à–∞–≥ –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (–¥–æ 15 –º–∏–Ω—É—Ç –Ω–∞ —Ç–µ—Å—Ç–Ω–µ—Ç–µ),
  // –ø–æ—ç—Ç–æ–º—É –æ–Ω –æ–±—ë—Ä–Ω—É—Ç –≤ —Ü–∏–∫–ª —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏.
  console.log("‚è≥ –û–∂–∏–¥–∞–µ–º VAA (attestation –æ—Ç guardian'–æ–≤) ‚Äî –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è...");

  let vaaFetched = false;
  const maxAttempts = 1800; // –Ω–∞–ø—Ä–∏–º–µ—Ä –¥–æ —á–∞—Å–∞ (1800 * 2 —Å–µ–∫)
  const retryDelay = 2000; // 2 —Å–µ–∫

  for (let attempt = 0; attempt < maxAttempts; attempt++) {
    try {
      await xfer.fetchAttestation(5000); // –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç
      vaaFetched = true;
      console.log("‚úÖ VAA –ø–æ–ª—É—á–µ–Ω!");
      break;
    } catch (err: any) {
      if (err.message.includes("VAA not found") || err.code === "ECONNRESET") {
        console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/${maxAttempts}: VAA –ø–æ–∫–∞ –Ω–µ—Ç, –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ ${retryDelay / 1000} —Å–µ–∫...`);
        await new Promise(res => setTimeout(res, retryDelay));
      } else {
        throw err; // –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –¥—Ä—É–≥–∞—è ‚Äî –∫–∏–¥–∞–µ–º
      }
    }
  }
  // 10) –í—ã–ø–æ–ª–Ω—è–µ–º complete/redeem –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–ø–∏  
  if (vaaFetched) {
    console.log("üì• –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ completeTransfer (redeem) –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–ø–∏...");
    const destTxids = await xfer.completeTransfer(rcvSigner);
    console.log("Dest txids:", destTxids);
    console.log("üéâ –¢—Ä–∞–Ω—Å—Ñ–µ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —Å–µ—Ç–∏.");
  } else {
    console.warn("‚ùå VAA –Ω–µ –ø–æ–ª—É—á–µ–Ω –∑–∞ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è. completeTransfer –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.");
  }    
  
}

main().catch((err) => {
  console.error("–û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏:", err);
  process.exit(1);
});
